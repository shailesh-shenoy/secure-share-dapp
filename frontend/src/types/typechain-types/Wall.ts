/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Wall {
  export type MessageStruct = {
    message: string;
    sender: AddressLike;
    timestamp: BigNumberish;
  };

  export type MessageStructOutput = [
    message: string,
    sender: string,
    timestamp: bigint
  ] & { message: string; sender: string; timestamp: bigint };
}

export interface WallInterface extends Interface {
  getFunction(
    nameOrSignature: "getAllPostedMessages" | "postMessage"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MessagePosted"): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllPostedMessages",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "postMessage", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getAllPostedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postMessage",
    data: BytesLike
  ): Result;
}

export namespace MessagePostedEvent {
  export type InputTuple = [message: Wall.MessageStruct];
  export type OutputTuple = [message: Wall.MessageStructOutput];
  export interface OutputObject {
    message: Wall.MessageStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Wall extends BaseContract {
  connect(runner?: ContractRunner | null): Wall;
  waitForDeployment(): Promise<this>;

  interface: WallInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllPostedMessages: TypedContractMethod<
    [],
    [Wall.MessageStructOutput[]],
    "view"
  >;

  postMessage: TypedContractMethod<[message: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllPostedMessages"
  ): TypedContractMethod<[], [Wall.MessageStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "postMessage"
  ): TypedContractMethod<[message: string], [void], "nonpayable">;

  getEvent(
    key: "MessagePosted"
  ): TypedContractEvent<
    MessagePostedEvent.InputTuple,
    MessagePostedEvent.OutputTuple,
    MessagePostedEvent.OutputObject
  >;

  filters: {
    "MessagePosted(tuple)": TypedContractEvent<
      MessagePostedEvent.InputTuple,
      MessagePostedEvent.OutputTuple,
      MessagePostedEvent.OutputObject
    >;
    MessagePosted: TypedContractEvent<
      MessagePostedEvent.InputTuple,
      MessagePostedEvent.OutputTuple,
      MessagePostedEvent.OutputObject
    >;
  };
}
