/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Wall, WallInterface } from "../Wall";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct Wall.Message",
        name: "message",
        type: "tuple",
      },
    ],
    name: "MessagePosted",
    type: "event",
  },
  {
    inputs: [],
    name: "getAllPostedMessages",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Wall.Message[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "postMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061099f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636630f88f1461003b578063e0dc45c114610057575b600080fd5b6100556004803603810190610050919061037f565b610075565b005b61005f6101bf565b60405161006c91906105c8565b60405180910390f35b6000604051806060016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014281525090506000819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001908161012f9190610825565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015550507f1af1792308babae01c4da9f884c14bc46d21030d3f646135daf218dbd6d8b3f0816040516101b29190610947565b60405180910390a1505050565b60606000805480602002602001604051908101604052809291908181526020016000905b82821015610307578382906000526020600020906003020160405180606001604052908160008201805461021690610648565b80601f016020809104026020016040519081016040528092919081815260200182805461024290610648565b801561028f5780601f106102645761010080835404028352916020019161028f565b820191906000526020600020905b81548152906001019060200180831161027257829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481525050815260200190600101906101e3565b50505050905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261033f5761033e61031a565b5b8235905067ffffffffffffffff81111561035c5761035b61031f565b5b60208301915083600182028301111561037857610377610324565b5b9250929050565b6000806020838503121561039657610395610310565b5b600083013567ffffffffffffffff8111156103b4576103b3610315565b5b6103c085828601610329565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610432578082015181840152602081019050610417565b60008484015250505050565b6000601f19601f8301169050919050565b600061045a826103f8565b6104648185610403565b9350610474818560208601610414565b61047d8161043e565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104b382610488565b9050919050565b6104c3816104a8565b82525050565b6000819050919050565b6104dc816104c9565b82525050565b600060608301600083015184820360008601526104ff828261044f565b915050602083015161051460208601826104ba565b50604083015161052760408601826104d3565b508091505092915050565b600061053e83836104e2565b905092915050565b6000602082019050919050565b600061055e826103cc565b61056881856103d7565b93508360208202850161057a856103e8565b8060005b858110156105b657848403895281516105978582610532565b94506105a283610546565b925060208a0199505060018101905061057e565b50829750879550505050505092915050565b600060208201905081810360008301526105e28184610553565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061066057607f821691505b60208210810361067357610672610619565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261069e565b6106e5868361069e565b95508019841693508086168417925050509392505050565b6000819050919050565b600061072261071d610718846104c9565b6106fd565b6104c9565b9050919050565b6000819050919050565b61073c83610707565b61075061074882610729565b8484546106ab565b825550505050565b600090565b610765610758565b610770818484610733565b505050565b5b818110156107945761078960008261075d565b600181019050610776565b5050565b601f8211156107d9576107aa81610679565b6107b38461068e565b810160208510156107c2578190505b6107d66107ce8561068e565b830182610775565b50505b505050565b600082821c905092915050565b60006107fc600019846008026107de565b1980831691505092915050565b600061081583836107eb565b9150826002028217905092915050565b61082e826103f8565b67ffffffffffffffff811115610847576108466105ea565b5b6108518254610648565b61085c828285610798565b600060209050601f83116001811461088f576000841561087d578287015190505b6108878582610809565b8655506108ef565b601f19841661089d86610679565b60005b828110156108c5578489015182556001820191506020850194506020810190506108a0565b868310156108e257848901516108de601f8916826107eb565b8355505b6001600288020188555050505b505050505050565b60006060830160008301518482036000860152610914828261044f565b915050602083015161092960208601826104ba565b50604083015161093c60408601826104d3565b508091505092915050565b6000602082019050818103600083015261096181846108f7565b90509291505056fea2646970667358221220c308781ae79462a7b9d5fcb06835cc6eb18b591ac9a7bc6ea68617f094a46cff64736f6c63430008150033";

type WallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Wall__factory extends ContractFactory {
  constructor(...args: WallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Wall & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Wall__factory {
    return super.connect(runner) as Wall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WallInterface {
    return new Interface(_abi) as WallInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Wall {
    return new Contract(address, _abi, runner) as unknown as Wall;
  }
}
